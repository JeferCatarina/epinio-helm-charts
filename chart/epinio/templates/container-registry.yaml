{{- if .Values.containerregistry.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: auth
  namespace: epinio-staging
stringData:
  # The only supported password format is bcrypt
  htpasswd:  {{ htpasswd .Values.global.registryUsername .Values.global.registryPassword | quote }}

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: epinio-registry
  namespace: epinio-staging
spec:
  dnsNames:
  - registry.epinio-staging.svc.cluster.local
  ipAddresses:
  - 127.0.0.1
  issuerRef:
    kind: ClusterIssuer
    name: epinio-ca
  secretName: epinio-registry-tls

---
apiVersion: v1
kind: Service
metadata:
  name: registry
  namespace: epinio-staging
  labels:
    app.kubernetes.io/name: "epinio-registry"
    app.kubernetes.io/instance: "epinio-registry"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: "epinio-registry"
    app.kubernetes.io/instance: "epinio-registry"
  ports:
  - name: registry
    port: 5000
    targetPort: 5000

{{ if .Values.containerregistry.createNodePort }}
---
apiVersion: v1
kind: Service
metadata:
  name: registry-node
  namespace: epinio-staging
  labels:
    app.kubernetes.io/name: "epinio-registry"
    app.kubernetes.io/instance: "epinio-registry"
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: "epinio-registry"
    app.kubernetes.io/instance: "epinio-registry"
  ports:
  - name: registry
    port: 5000
    targetPort: 5000
    nodePort: 30500
{{- end }}

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: registry-ds
  namespace: epinio-staging
  labels:
    app.kubernetes.io/name: "registry-ds"
    app.kubernetes.io/instance: "registry-ds"
spec:
  selector:
    matchLabels:
      name: registry-ds
  template:
    metadata:
      labels:
        name: registry-ds
    spec:
      containers:
      - name: registry-ds
        image: busybox
        command: [ 'sh' ]
        args: [ '-c', 'mkdir -p /etc/docker/certs.d/127.0.0.1:30500 && cp -f /mnt/certs/ca.crt /etc/docker/certs.d/127.0.0.1:30500/ca.crt && exec tail -f /dev/null' ]
        volumeMounts:
        - name: etc-docker
          mountPath: /etc/docker/certs.d
        - name: ca-cert
          mountPath: /mnt/certs
      terminationGracePeriodSeconds: 30
      volumes:
      - name: etc-docker
        hostPath:
          path: /etc/docker/certs.d
      - name: ca-cert
        secret:
          secretName: epinio-registry-tls

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  namespace: epinio-staging
  labels:
    app.kubernetes.io/name: "epinio-registry"
    app.kubernetes.io/instance: "epinio-registry"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "epinio-registry"
      app.kubernetes.io/instance: "epinio-registry"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "epinio-registry"
        app.kubernetes.io/instance: "epinio-registry"
    spec:
      containers:
      - name: registry
        image: {{ .Values.containerregistry.image }}
        imagePullPolicy: {{ .Values.containerregistry.imagePullPolicy }}
        env:
        - name: REGISTRY_AUTH
          value: htpasswd
        - name: REGISTRY_AUTH_HTPASSWD_REALM
          value: Registry Realm
        - name: REGISTRY_AUTH_HTPASSWD_PATH
          value: /etc/registry/auth/htpasswd
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: "/certs/tls.crt"
        - name: REGISTRY_HTTP_TLS_KEY
          value: "/certs/tls.key"
        volumeMounts:
        - name: registry
          mountPath: /var/lib/registry
          readOnly: false
        - name: auth
          mountPath: /etc/registry/auth
          readOnly: true
        - name: certs
          mountPath: /certs
          readOnly: true
        securityContext:
          runAsUser: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        livenessProbe:
          httpGet:
            port: 5000
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            port: 5000
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: registry
        emptyDir: {}
      - name: auth
        secret:
          secretName: auth
      - name: certs
        secret:
          secretName: epinio-registry-tls
{{- end }}
